-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Exp.

module Exp.Abs where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Module = Module AIdent [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = DeclDef AIdent [Tele] Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Let [Decl] Exp
    | Lam AIdent [AIdent] Exp
    | Fun Exp Exp
    | Pi Tele [Tele] Exp
    | Sigma Tele [Tele] Exp
    | App Exp Exp
    | Id Exp Exp Exp
    | IdJ Exp Exp Exp Exp Exp Exp
    | Refl Exp Exp
    | Fst Exp
    | Snd Exp
    | Pair Exp [Exp]
    | Var AIdent
    | U
    | Hole HoleIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tele = Tele AIdent [AIdent] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype AIdent = AIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype HoleIdent = HoleIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition AIdent where
  hasPosition (AIdent (p, _)) = C.Just p

instance HasPosition HoleIdent where
  hasPosition (HoleIdent (p, _)) = C.Just p

